{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fnil\fcharset0 Calibri;\f1\froman\fcharset0 TimesNewRomanPSMT;}
{\colortbl;\red255\green255\blue255;\red5\green99\blue193;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab708
\pard\pardeftab708\ri-52\sl276\slmult1\sa200\qj

\f0\i\fs24 \cf0 @Override\
\pard\pardeftab708\ri-52\sl276\slmult1\qj
\cf0 public void onSurfaceCreated(GL10 gl, EGLConfig config) \{\
 GLES20.glClearColor(0.1 f, 0.1 f, 0.1 f, 1.0 f);\
\
 // Cr\'e9ation de la texture \'e0 rendre et passage \'e0 la session ARCore\
 mBackgroundRenderer.createOnGlThread(this);\
 mSession.setCameraTextureName(mBackgroundRenderer.getTextureId());\
\
 // Rendu du robot\
 try \{\
   mVirtualObject.createOnGlThread(this, "andy.obj", "andy.png");\
   mVirtualObject.setMaterialProperties(0.0 f, 3.5 f, 1.0 f, 6.0 f);\
   mVirtualObjectShadow.createOnGlThread(this, "andy_shadow.obj", "andy_shadow.png");\
   mVirtualObjectShadow.setBlendMode(BlendMode.Shadow);\
   mVirtualObjectShadow.setMaterialProperties(1.0 f, 0.0 f, 0.0 f, 1.0 f);\
 
\f1 \}
\f0  catch (IOException e) \{\}\
\
 // Rendu du plan\
 try \{\
  mPlaneRenderer.createOnGlThread(this, "trigrid.png");\
 \} catch (IOException e) \{\
 \}\
 \
 mPointCloud.createOnGlThread(this);\
\}\
\
 \
@Override\
public void onSurfaceChanged(GL10 gl, int width, int height) \{\
 GLES20.glViewport(0, 0, width, height);\
 // Notification des changements de dimension de la vue \'e0 la session ARCore\
 // pour recalcul de la matrice de perspective\
 mSession.setDisplayGeometry(width, height);\
\}\
\
@Override\
public void onDrawFrame(GL10 gl) \{
\f1 \

\f0  GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT);\
\
 try \{\
  // On r\'e9cup\'e8re la frame courante via appel \'e0 la session ARCore\
  Frame frame = mSession.update();\
\
  // Gestion des taps \'e0 l'\'e9cran\
  MotionEvent tap = mQueuedSingleTaps.poll();\
\
  if (tap != null && frame.getTrackingState() == TrackingState.TRACKING) \{\
    for (HitResult hit: frame.hitTest(tap)) \{\
      // On v\'e9rifie sir un plan a \'e9t\'e9 touch\'e9\
      if (hit instanceof PlaneHitResult && ((PlaneHitResult) hit).isHitInPolygon()) \{\
        // On limite le nombre d'objets virtuels \'e0 16\
        if (mTouches.size() >= 16) \{\
          mSession.removeAnchors(Arrays.asList(mTouches.get(0).getAnchor()));\
          mTouches.remove(0);\
        \}\
\
        // L'ajout d'une ancre indique \'e0 ARCore que les mouvements de cet objet\
        // doivent \'eatre suivis\
        mTouches.add(new PlaneAttachment(((PlaneHitResult) hit).getPlane(),\
        mSession.addAnchor(hit.getHitPose())));\
\
        break;\
      \}\
    \}\
  \}\
\
  // On dessine l'arri\'e8re-plan\
  mBackgroundRenderer.draw(frame);\
\
  // Si le suivi n'est pas activt\'e9, on sort\
  if (frame.getTrackingState() == TrackingState.NOT_TRACKING) \{\
    return;\
  \}\
\
  // On charge la matrice de projection\
  float[] projmtx = new float[16];\
  mSession.getProjectionMatrix(projmtx, 0, 0.1 f, 100.0 f);\
\
  // On charge la matrice de la cam\'e9ra\
  float[] viewmtx = new float[16];\
  frame.getViewMatrix(viewmtx, 0);\
\
  // Calcul de la lumi\'e8re l'\'e9clairage\
  final float lightIntensity = frame.getLightEstimate().getPixelIntensity();\
\
  // On visualise les points suivis\
  mPointCloud.update(frame.getPointCloud());\
  mPointCloud.draw(frame.getPointCloudPose(), viewmtx, projmtx);\
\
  if (mLoadingMessageSnackbar != null) \{\
    for (Plane plane: mSession.getAllPlanes()) \{\
      if (plane.getType() == com.google.ar.core.Plane.Type.HORIZONTAL_UPWARD_FACING &&\
          plane.getTrackingState() == Plane.TrackingState.TRACKING) \{\
        hideLoadingMessage();\
        break;\
      \}\
    \}\
  \}\
\
  // on visualise les plans\
  mPlaneRenderer.drawPlanes(mSession.getAllPlanes(), frame.getPose(), projmtx);\
\
  // Enfin, on visualise les ancres cr\'e9\'e9es\
  float scaleFactor = 1.0 f;\
\
  for (PlaneAttachment planeAttachment: mTouches) \{\
    if (!planeAttachment.isTracking()) \{\
      continue;\
    \}\
\
    planeAttachment.getPose().toMatrix(mAnchorMatrix, 0);\
\
    // Dessin du model\
    mVirtualObject.updateModelMatrix(mAnchorMatrix, scaleFactor);\
    mVirtualObjectShadow.updateModelMatrix(mAnchorMatrix, scaleFactor);\
    mVirtualObject.draw(viewmtx, projmtx, lightIntensity);\
    mVirtualObjectShadow.draw(viewmtx, projmtx, lightIntensity);\
  
\f1 \}\

\f0  \} catch (Throwable t) \{\
 \}\
\pard\pardeftab708\ri-52\sl276\slmult1\sa200\qj

\f1 \cf0 \}
\i0 \
\pard\pardeftab708\ri-52\sl276\slmult1

\i \cf2 \ul \ulc2 \
}